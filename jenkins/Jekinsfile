pipeline {
    agent any

    environment {
        ARTIFACTORY_URL = 'https://manojkamatam.jfrog.io/artifactory'
        ARTIFACTORY_REPO = 'app_deployement-generic-local'
        CREDENTIALS_ID = 'your-jenkins-credentials-id'
        ENVIRONMENT_NAME = 'test-env-env'
        APPLICATION_NAME = 'test-env'
        AWS_REGION = 'us-east-1'
        SECRET_NAME = 'secret-jenkins-access'
        VERSION_LABEL = "app-version-${BUILD_NUMBER}"
    }

    stages {
        stage('Retrieve AWS Credentials from Secrets Manager') {
            steps {
                script {
                    def secretValue = sh(script: "aws secretsmanager get-secret-value --secret-id ${SECRET_NAME} --query 'SecretString' --output text --region ${AWS_REGION}", returnStdout: true).trim()
                    def jsonSlurper = new groovy.json.JsonSlurper()
                    def credentials = jsonSlurper.parseText(secretValue)
                    env.AWS_ACCESS_KEY_ID = credentials.keySet().iterator().next()
                    env.AWS_SECRET_ACCESS_KEY = credentials[env.AWS_ACCESS_KEY_ID]
                }
            }
        }

        stage('Checkout') {
            steps {
                git url: 'https://github.com/ManojKamatam/Beanstalk_Deployments_maintainingVersions-SecretManager.git', branch: 'main'
            }
        }

        stage('Upload to JFrog Artifactory') {
            steps {
                script {
                    def server = Artifactory.server('Artifactory-Server')
                    def uploadSpec = """{
                        "files": [{
                            "pattern": "application.zip",
                            "target": "${ARTIFACTORY_REPO}/my-app/${VERSION_LABEL}/"
                        }]
                    }"""
                    server.upload(uploadSpec)
                }
            }
        }

        stage('Create Application Version in Elastic Beanstalk') {
            steps {
                sh """
                    aws elasticbeanstalk create-application-version \
                    --application-name ${APPLICATION_NAME} \
                    --version-label ${VERSION_LABEL} \
                    --source-bundle S3Bucket=${S3_BUCKET},S3Key=${S3_KEY} \
                    --region ${AWS_REGION}
                """
            }
        }

        stage('Update Elastic Beanstalk Environment') {
            steps {
                sh """
                    aws elasticbeanstalk update-environment \
                    --application-name ${APPLICATION_NAME} \
                    --environment-name ${ENVIRONMENT_NAME} \
                    --version-label ${VERSION_LABEL} \
                    --region ${AWS_REGION}
                """
            }
        }
    }

    post {
        success {
            echo 'Deployment process completed successfully.'
        }
        failure {
            echo 'Deployment process failed. Please check the logs for more details.'
        }
    }
}
